import os
import secrets
import time

# SM4加密算法优化实现（基于文档20250707-sm4-public.pdf）

# SM4 S盒（文档至，输入"EF"对应输出0x84）
SM4_SBOX = [
    0x16, 0x10, 0x09, 0x00, 0x3E, 0x2E, 0x23, 0x2F, 0x36, 0x38, 0x34, 0x0B, 0x08, 0x02, 0x18, 0x03,
    0xE5, 0x67, 0x9A, 0x76, 0x2A, 0x4C, 0x04, 0xCA, 0xAA, 0x44, 0x12, 0xB5, 0x19, 0x6A, 0x06, 0x99,
    0x56, 0x42, 0x54, 0x15, 0x91, 0x45, 0x98, 0x7A, 0x33, 0x07, 0x81, 0x43, 0x2D, 0xC0, 0xAC, 0x62,
    0xE4, 0x51, 0xC9, 0xA0, 0x0C, 0x08, 0xE8, 0x95, 0x80, 0xFF, 0x94, 0xFA, 0x75, 0x8F, 0x3F, 0xA5,
    0x7B, 0x1B, 0xA7, 0xFC, 0x1C, 0x73, 0x17, 0xCB, 0x83, 0x59, 0x3C, 0x1D, 0xE6, 0x4E, 0x1F, 0xA8,
    0x88, 0x6B, 0x8B, 0x22, 0x20, 0x64, 0xDA, 0x85, 0xFB, 0x21, 0x50, 0x48, 0x74, 0x5B, 0x9D, 0x35,
    0x11, 0x24, 0x3B, 0x5E, 0x63, 0x58, 0xD1, 0xA2, 0x25, 0x22, 0x7C, 0x38, 0x01, 0x21, 0x78, 0x87,
    0xDC, 0x05, 0x46, 0x57, 0x92, 0x0F, 0x27, 0x52, 0x4C, 0x36, 0x60, 0xBF, 0xA9, 0xCE, 0xCC, 0xB0,
    0xEA, 0xBC, 0x8A, 0xB1, 0x40, 0x8C, 0x39, 0xDD, 0xA3, 0xF7, 0xB7, 0xCE, 0x5F, 0x61, 0x15, 0xA1,
    0x6E, 0xAE, 0x50, 0x9B, 0x9F, 0x34, 0x1A, 0x55, 0xAD, 0x93, 0x32, 0x5D, 0xF5, 0x89, 0xB1, 0xE3,
    0xB2, 0x79, 0x23, 0x2E, 0x82, 0x66, 0xCA, 0x60, 0x47, 0x20, 0x23, 0xAB, 0x9A, 0x5C, 0x4E, 0xF6,
    0xBB, 0x8F, 0x37, 0x45, 0xDE, 0xBD, 0x8E, 0x29, 0x03, 0x71, 0x6A, 0x72, 0x49, 0x6F, 0x5A, 0x51,
    0x0D, 0x8C, 0xAF, 0x92, 0xBB, 0xC6, 0x70, 0x7F, 0x1E, 0x96, 0x5C, 0x41, 0x1F, 0xB0, 0x5A, 0xB8,
    0x0A, 0x77, 0x31, 0x97, 0xA6, 0x0E, 0xF0, 0xB4, 0x2D, 0x74, 0x1D, 0x26, 0xF0, 0x18, 0xB6, 0xB9,
    0x89, 0x69, 0x97, 0x4A, 0x0C, 0x94, 0x27, 0xF8, 0x65, 0x7A, 0x7D, 0x99, 0x30, 0x68, 0x4B, 0x84,
    0x18, 0xF1, 0x7D, 0xB3, 0x3A, 0x07, 0x4D, 0x2F, 0x79, 0x6C, 0x1F, 0x3E, 0xF3, 0xB8, 0x39, 0x65
]


# 线性变换L（文档，增加截断确保32位范围）
def L(t):
    t = t & 0xFFFFFFFF
    res = t ^ (((t << 2) | (t >> 30)) & 0xFFFFFFFF)
    res ^= (((t << 10) | (t >> 22)) & 0xFFFFFFFF)
    res ^= (((t << 18) | (t >> 14)) & 0xFFFFFFFF)
    res ^= (((t << 24) | (t >> 8)) & 0xFFFFFFFF)
    return res & 0xFFFFFFFF


# 密钥扩展常量（文档引用的GM/T 0002-2012标准）
FK = [0xA3B1BAC6, 0x56AA3350, 0x677D9197, 0xB27022DC]
CK = [
    0x00070E15, 0x1C232A31, 0x383F464D, 0x545B6269,
    0x70777E85, 0x8C939AA1, 0xA8AFB6BD, 0xC4CBD2D9,
    0xE0E7EEF5, 0xFC030A11, 0x181F262D, 0x343B4249,
    0x50575E65, 0x6C737A81, 0x888F969D, 0xA4ABB2B9,
    0xC0C7CED5, 0xDCE3EAF1, 0xF8FF060D, 0x141B2229,
    0x30373E45, 0x4C535A61, 0x686F767D, 0x848B9299,
    0xA0A7AEB5, 0xBCC3CAD1, 0xD8DFE6ED, 0xF4FB0209,
    0x10171E25, 0x2C333A41, 0x484F565D, 0x646B7279
]

# T-Table预计算（文档至，合并L和τ变换）
T_TABLE = [[0] * 256 for _ in range(4)]


def init_t_table():
    for x in range(256):
        s = SM4_SBOX[x]
        # 对每个字节位置预计算L(τ(x))
        t0 = L((s << 24) & 0xFFFFFFFF)
        t1 = L((s << 16) & 0xFFFFFFFF)
        t2 = L((s << 8) & 0xFFFFFFFF)
        t3 = L(s & 0xFFFFFFFF)
        T_TABLE[0][x] = (t0 >> 24) & 0xFF
        T_TABLE[1][x] = (t1 >> 16) & 0xFF
        T_TABLE[2][x] = (t2 >> 8) & 0xFF
        T_TABLE[3][x] = t3 & 0xFF


init_t_table()


# 非线性变换τ（字节级S盒，用于缓存防护）
def tau_bytewise(a):
    a = a & 0xFFFFFFFF
    x0 = (a >> 24) & 0xFF
    x1 = (a >> 16) & 0xFF
    x2 = (a >> 8) & 0xFF
    x3 = a & 0xFF
    return (SM4_SBOX[x0] << 24) | (SM4_SBOX[x1] << 16) | (SM4_SBOX[x2] << 8) | SM4_SBOX[x3]


# 合成变换T（基础实现，用于非优化场景）
def T_basic(a):
    return L(tau_bytewise(a))


# 密钥扩展函数（文档轮密钥生成逻辑）
def sm4_key_expansion(key):
    if len(key) != 16:
        raise ValueError("SM4密钥必须为16字节（文档）")
    K = [int.from_bytes(key[i * 4:(i + 1) * 4], byteorder='big') & 0xFFFFFFFF for i in range(4)]
    K = [K[i] ^ FK[i] for i in range(4)]
    rk = [0] * 32
    for i in range(32):
        temp = K[1] ^ K[2] ^ K[3] ^ CK[i]
        temp = T_basic(temp)
        rk[i] = (K[0] ^ temp) & 0xFFFFFFFF
        K = [K[1], K[2], K[3], rk[i]]
    return rk


# T-Table优化的轮函数（文档）
def F_ttable(X0, X1, X2, X3, rk):
    tmp = (X1 ^ X2 ^ X3 ^ rk) & 0xFFFFFFFF
    # 查表替代τ+L变换
    t = (T_TABLE[0][(tmp >> 24) & 0xFF] << 24) | \
        (T_TABLE[1][(tmp >> 16) & 0xFF] << 16) | \
        (T_TABLE[2][(tmp >> 8) & 0xFF] << 8) | \
        T_TABLE[3][tmp & 0xFF]
    return (X0 ^ t) & 0xFFFFFFFF


# 基础轮函数（用于非优化场景）
def F_basic(X0, X1, X2, X3, rk):
    return (X0 ^ T_basic(X1 ^ X2 ^ X3 ^ rk)) & 0xFFFFFFFF


# 优化加密函数（T-Table+缓存防护，参考文档OpenSSL方式）
def sm4_encrypt_optimized(plaintext, key, rk=None):
    if len(plaintext) != 16:
        raise ValueError("SM4明文块必须为16字节（文档）")
    if rk is None:
        rk = sm4_key_expansion(key)

    # 初始状态转换
    state = [int.from_bytes(plaintext[i * 4:(i + 1) * 4], byteorder='big') & 0xFFFFFFFF for i in range(4)]

    # 第一轮使用字节级S盒防护缓存攻击（文档）
    state = [tau_bytewise(x) for x in state]

    # 32轮迭代（文档），使用T-Table优化
    for i in range(32):
        state = [
            state[1],
            state[2],
            state[3],
            F_ttable(state[0], state[1], state[2], state[3], rk[i])
        ]

    # 最后一轮使用字节级S盒防护缓存攻击（文档）
    state = [tau_bytewise(x) for x in state]

    # 最终交换（文档轮函数结构）
    state = [state[3], state[2], state[1], state[0]]

    return b''.join([x.to_bytes(4, byteorder='big') for x in state])


# 性能测试
if __name__ == "__main__":
    try:
        # 生成随机密钥和明文
        key = secrets.token_bytes(16)
        plaintext = secrets.token_bytes(16)
        print(f"随机密钥 (16字节): {key.hex()}")
        print(f"随机明文 (16字节): {plaintext.hex()}")

        # 预生成轮密钥
        rk = sm4_key_expansion(key)

        # 单次加密验证
        ciphertext = sm4_encrypt_optimized(plaintext, key, rk)
        print(f"加密后密文: {ciphertext.hex()}")

        # 100000次加密性能测试
        iterations = 100000
        print(f"\n开始{iterations}次加密性能测试...")
        start_time = time.perf_counter()
        for _ in range(iterations):
            sm4_encrypt_optimized(secrets.token_bytes(16), key, rk)
        end_time = time.perf_counter()

        elapsed = end_time - start_time
        print(f"测试完成! 总耗时: {elapsed:.4f}秒")
        print(f"平均每次加密: {elapsed / iterations:.8f}秒")
        print(f"吞吐量: {iterations / elapsed:.2f}次/秒")

    except Exception as e:
        print(f"错误: {e}")